<html><head>
<TITLE>Lorenz strange attractor</TITLE>
<script>

CanvasMatrix4=function(m) {
  this.makeIdentity()
};

CanvasMatrix4.prototype.makeIdentity=function(){
  this.m11=1;this.m12=0;this.m13=0;this.m14=0;
  this.m21=0;this.m22=1;this.m23=0;this.m24=0;
  this.m31=0;this.m32=0;this.m33=1;this.m34=0;
  this.m41=0;this.m42=0;this.m43=0;this.m44=1
};

CanvasMatrix4.prototype.rotate=function(angle,x,y,z){
  angle=angle/180*Math.PI;angle/=2;
  var sinA=Math.sin(angle);
  var cosA=Math.cos(angle);
  var sinA2=sinA*sinA;
  var length=Math.sqrt(x*x+y*y+z*z);
  if(length==0){x=0;y=0;z=1}
  else if(length!=1){x/=length;y/=length;z/=length}
  var mat=new CanvasMatrix4();
  if(x==1&&y==0&&z==0){
    mat.m11=1;mat.m12=0;mat.m13=0;
    mat.m21=0;mat.m22=1-2*sinA2;mat.m23=2*sinA*cosA;
    mat.m31=0;mat.m32=-2*sinA*cosA;mat.m33=1-2*sinA2;
    mat.m14=mat.m24=mat.m34=0;
    mat.m41=mat.m42=mat.m43=0;
    mat.m44=1
  }
  else if(x==0&&y==1&&z==0){
    mat.m11=1-2*sinA2;mat.m12=0;mat.m13=-2*sinA*cosA;
    mat.m21=0;mat.m22=1;mat.m23=0;mat.m31=2*sinA*cosA;
    mat.m32=0;mat.m33=1-2*sinA2;
    mat.m14=mat.m24=mat.m34=0;
    mat.m41=mat.m42=mat.m43=0;
    mat.m44=1
  }
  else if(x==0&&y==0&&z==1){
    mat.m11=1-2*sinA2;mat.m12=2*sinA*cosA;mat.m13=0;
    mat.m21=-2*sinA*cosA;mat.m22=1-2*sinA2;mat.m23=0;
    mat.m31=0;mat.m32=0;mat.m33=1;
    mat.m14=mat.m24=mat.m34=0;
    mat.m41=mat.m42=mat.m43=0;
    mat.m44=1
  }
  else{
    var x2=x*x;var y2=y*y;var z2=z*z;
    mat.m11=1-2*(y2+z2)*sinA2;
    mat.m12=2*(x*y*sinA2+z*sinA*cosA);
    mat.m13=2*(x*z*sinA2-y*sinA*cosA);
    mat.m21=2*(y*x*sinA2-z*sinA*cosA);
    mat.m22=1-2*(z2+x2)*sinA2;
    mat.m23=2*(y*z*sinA2+x*sinA*cosA);
    mat.m31=2*(z*x*sinA2+y*sinA*cosA);
    mat.m32=2*(z*y*sinA2-x*sinA*cosA);
    mat.m33=1-2*(x2+y2)*sinA2;
    mat.m14=mat.m24=mat.m34=0;
    mat.m41=mat.m42=mat.m43=0;
    mat.m44=1
  }
  this.multRight(mat)
};

CanvasMatrix4.prototype.multRight=function(mat){
  var m11=(this.m11*mat.m11+this.m12*mat.m21+this.m13*mat.m31+this.m14*mat.m41);
  var m12=(this.m11*mat.m12+this.m12*mat.m22+this.m13*mat.m32+this.m14*mat.m42);
  var m13=(this.m11*mat.m13+this.m12*mat.m23+this.m13*mat.m33+this.m14*mat.m43);
  var m14=(this.m11*mat.m14+this.m12*mat.m24+this.m13*mat.m34+this.m14*mat.m44);
  var m21=(this.m21*mat.m11+this.m22*mat.m21+this.m23*mat.m31+this.m24*mat.m41);
  var m22=(this.m21*mat.m12+this.m22*mat.m22+this.m23*mat.m32+this.m24*mat.m42);
  var m23=(this.m21*mat.m13+this.m22*mat.m23+this.m23*mat.m33+this.m24*mat.m43);
  var m24=(this.m21*mat.m14+this.m22*mat.m24+this.m23*mat.m34+this.m24*mat.m44);
  var m31=(this.m31*mat.m11+this.m32*mat.m21+this.m33*mat.m31+this.m34*mat.m41);
  var m32=(this.m31*mat.m12+this.m32*mat.m22+this.m33*mat.m32+this.m34*mat.m42);
  var m33=(this.m31*mat.m13+this.m32*mat.m23+this.m33*mat.m33+this.m34*mat.m43);
  var m34=(this.m31*mat.m14+this.m32*mat.m24+this.m33*mat.m34+this.m34*mat.m44);
  var m41=(this.m41*mat.m11+this.m42*mat.m21+this.m43*mat.m31+this.m44*mat.m41);
  var m42=(this.m41*mat.m12+this.m42*mat.m22+this.m43*mat.m32+this.m44*mat.m42);
  var m43=(this.m41*mat.m13+this.m42*mat.m23+this.m43*mat.m33+this.m44*mat.m43);
  var m44=(this.m41*mat.m14+this.m42*mat.m24+this.m43*mat.m34+this.m44*mat.m44);

  this.m11=m11;this.m12=m12;this.m13=m13;this.m14=m14;
  this.m21=m21;this.m22=m22;this.m23=m23;this.m24=m24;
  this.m31=m31;this.m32=m32;this.m33=m33;this.m34=m34;
  this.m41=m41;this.m42=m42;this.m43=m43;this.m44=m44
};

</script>
<script id="shader-vs" type="x-shader/x-vertex">

attribute vec2 aPos;
attribute vec2 aTexCoord;
varying   vec2 vTexCoord;

void main(void) {
   gl_Position = vec4(aPos, 0., 1.);
   vTexCoord = aTexCoord;
}

</script>
<script id="shader-fs" type="x-shader/x-fragment">

precision highp float;
uniform sampler2D samp;
uniform sampler2D samp1;
varying vec2 vTexCoord;
uniform vec4 abrdt;

void main(void) {
   vec3 r = texture2D(samp, vTexCoord).xyz;
   gl_FragColor = vec4(
     r.x + abrdt.x*(r.y - r.x)*abrdt.w,
     r.y + (r.x*(abrdt.z - r.z) - r.y)*abrdt.w,
     r.z + (r.x*r.y - abrdt.y*r.z)*abrdt.w,  1. );
}

</script>
<script id="shader-vs-show" type="x-shader/x-vertex">

attribute vec2 aPoints;
uniform vec3 RotX;
uniform vec3 RotY;
uniform vec2 param;
uniform sampler2D uTexSamp;

void main(void) {
   vec3 p = texture2D(uTexSamp, aPoints ).xyz;
   p.z -= 25.;

   gl_Position = vec4(dot(p, RotX), dot(p, RotY), 0., param.x);
   gl_PointSize = 1.;
}

</script>
<script id="shader-fs-show" type="x-shader/x-fragment">

precision highp float;
uniform vec2 param;

void main(void) {
   gl_FragColor = vec4( .5, 1., .5,  param.y );
}

</script>
<script type="text/javascript">

function getShader ( gl, id ){
   var shaderScript = document.getElementById ( id );
   var str = "";
   var k = shaderScript.firstChild;
   while ( k ){
     if ( k.nodeType == 3 ) str += k.textContent;
     k = k.nextSibling;
   }
   var shader;
   if ( shaderScript.type == "x-shader/x-fragment" )
           shader = gl.createShader ( gl.FRAGMENT_SHADER );
   else if ( shaderScript.type == "x-shader/x-vertex" )
           shader = gl.createShader(gl.VERTEX_SHADER);
   else return null;
   gl.shaderSource(shader, str);
   gl.compileShader(shader);
   if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) == 0)
      alert(id + "\n" + gl.getShaderInfoLog(shader));
   return shader;
}

var gl, canvas,
    prog, prog_show, texture, texture1, FBO, FBO1, samp, pix,
    xLoc, yLoc, pLoc, rotMat, scale = 20, alpha = .04, setScale = true, setAb = true,
    a = 3, b = 1, r = 26.5, dt = .01,
    xOffs = yOffs = 0,  drag  = 0,  xRot = yRot = 0,
    m = 2*512, n = m*m,  time, frames, size, animation;

function webGLStart() {
   canvas = document.getElementById("canvas");
   size = Math.min(window.innerWidth, window.innerHeight);
   canvas.width =  size;   canvas.height = size;
   var err = "Your browser does not support ";
   if (!window.WebGLRenderingContext){
    alert(err + "WebGL. See http://get.webgl.org"); return;}
   try { gl = canvas.getContext("experimental-webgl");
   } catch(e) {}
   if ( !gl ) {alert("Can't get WebGL"); return;}
   var ext = gl.getExtension("OES_texture_float");
   if ( !ext ) {alert(err + "OES_texture_float extension"); return;}
   if (gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) == 0){
     alert(err + "Vertex texture"); return;}

   prog  = gl.createProgram();
   gl.attachShader(prog, getShader( gl, "shader-vs" ));
   gl.attachShader(prog, getShader( gl, "shader-fs" ));
   gl.linkProgram(prog);

   gl.useProgram(prog);
   var aPosLoc = gl.getAttribLocation(prog, "aPos");
   var aTexLoc = gl.getAttribLocation(prog, "aTexCoord");
   gl.enableVertexAttribArray( aPosLoc );
   gl.enableVertexAttribArray( aTexLoc );
   gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
   gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1,-1,0,0, -1,1,0,1,
    1,-1,1,0, 1,1,1,1]), gl.STATIC_DRAW);
   gl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, gl.FALSE, 16, 0);
   gl.vertexAttribPointer(aTexLoc, 2, gl.FLOAT, gl.FALSE, 16, 8);

   pix = new Float32Array(4*n);
   var d = 12, t = 0;
   for(var i = 0; i < n; i++){
     pix[t++] = d*(Math.random() + Math.random() + Math.random() - 1.5);
     pix[t++] = d*(Math.random() + Math.random() + Math.random() - 1.5);
     pix[t++] = d*(Math.random() + Math.random() + Math.random() - 1.5) + 25;
     pix[t++] = 0
   }
   texture1 = gl.createTexture();
   gl.activeTexture(gl.TEXTURE1);
   gl.bindTexture(gl.TEXTURE_2D, texture1);
   gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
   gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, m, m, 0,
     gl.RGBA, gl.FLOAT, pix);
   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

   texture = gl.createTexture();
   gl.activeTexture(gl.TEXTURE0);
   gl.bindTexture(gl.TEXTURE_2D, texture);
   gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
   gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, m, m, 0,
     gl.RGBA, gl.FLOAT, pix);
   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

   FBO = gl.createFramebuffer();
   gl.bindFramebuffer(gl.FRAMEBUFFER, FBO);
   gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
       gl.TEXTURE_2D, texture, 0);
   FBO1 = gl.createFramebuffer();
   gl.bindFramebuffer(gl.FRAMEBUFFER, FBO1);
   gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
       gl.TEXTURE_2D, texture1, 0);
   if( gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE)
     alert(err + "FLOAT as the color attachment to an FBO");

   samp = gl.getUniformLocation(prog, "samp");
   abLoc = gl.getUniformLocation(prog, "abrdt");

   prog_show  = gl.createProgram();
   gl.attachShader(prog_show, getShader( gl, "shader-vs-show" ));
   gl.attachShader(prog_show, getShader( gl, "shader-fs-show" ));
   var aPointsLoc = 2;
   gl.bindAttribLocation(prog_show, aPointsLoc, "aPoints");
   gl.linkProgram(prog_show);
   gl.useProgram(prog_show);

   var vertices = new Float32Array(2*n), d = 1/m, t = 0;
   for ( var y = d/2; y < 1; y += d )
    for ( var x = d/2; x < 1; x += d ){
      vertices[t++] = x;  vertices[t++] = y;
    }
   gl.enableVertexAttribArray( aPointsLoc );
   gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
   gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
   gl.vertexAttribPointer(aPointsLoc, 2, gl.FLOAT, false, 0, 0);

   gl.uniform1i(gl.getUniformLocation(prog_show, "uTexSamp"), 0);

   rotMat = new CanvasMatrix4();
   rotMat.makeIdentity();
   xLoc = gl.getUniformLocation(prog_show, "RotX");
   yLoc = gl.getUniformLocation(prog_show, "RotY");
   pLoc = gl.getUniformLocation(prog_show, "param");

   gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
   gl.clearColor(0, 0, 0, 1);
   gl.disable(gl.DEPTH_TEST);

   time = new Date().getTime();  frames = 20;
   animation = "animate";
//   drawScene();
   anim();

  canvas.resize = function (){
    size = Math.min(window.innerWidth, window.innerHeight) - 40;
    canvas.width =  size;   canvas.height = size;
    gl.viewport(0, 0, size, size);
    drawScene();
  }
  canvas.onmousedown = function ( ev ){
     drag  = 1;
     xOffs = ev.clientX;  yOffs = ev.clientY;
  }
  canvas.onmouseup = function ( ev ){
     drag  = 0;
     xOffs = ev.clientX;  yOffs = ev.clientY;
  }
  canvas.onmousemove = function ( ev ){
     if ( drag == 0 ) return;
     if ( ev.shiftKey ) {
        transl *= 1 + (ev.clientY - yOffs)/300;
        yRot = - xOffs + ev.clientX; }
     else {
        yRot = - xOffs + ev.clientX;  xRot = - yOffs + ev.clientY; }
     xOffs = ev.clientX;   yOffs = ev.clientY;
     drawScene();
  }
  var wheelHandler = function(ev) {
    var del = 1.1;
    if (ev.shiftKey) del = 1.01;
    var ds = ((ev.detail || ev.wheelDelta) > 0) ? del : (1 / del);
    scale *= ds;
    setScale = true;
    drawScene();
    ev.preventDefault();
  };
  canvas.addEventListener('DOMMouseScroll', wheelHandler, false);
  canvas.addEventListener('mousewheel', wheelHandler, false);
}
function draw(){
   gl.viewport(0, 0, m, m);
   gl.useProgram(prog);
   if(setAb){
     gl.uniform4f( abLoc, a, b, r, dt );
     setAb = false;}
   gl.uniform1i(samp, 0);
   gl.bindFramebuffer(gl.FRAMEBUFFER, FBO1);
   gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);

   gl.uniform1i(samp, 1);
   gl.bindFramebuffer(gl.FRAMEBUFFER, FBO);
   gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);

   drawScene();
   fr();
}
function drawScene(){
  gl.viewport(0, 0, size, size);
  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  gl.useProgram(prog_show);
  rotMat.rotate(xRot/3, 1,0,0);  rotMat.rotate(yRot/3, 0,1,0);
  yRot = 0;  xRot = 0;
  gl.clear(gl.COLOR_BUFFER_BIT);
  gl.uniform3f( xLoc, rotMat.m11, rotMat.m21, rotMat.m31 );
  gl.uniform3f( yLoc, rotMat.m12, rotMat.m22, rotMat.m32 );

  if(setScale){
    gl.uniform2f( pLoc, scale, alpha );
    setScale = false;}
  gl.enable(gl.BLEND);
  gl.drawArrays(gl.POINTS, 0, n);
  gl.disable(gl.BLEND);
}
function anim(){
   draw();
   switch ( animation ){
     case "reset":
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, m, m, 0,
       gl.RGBA, gl.FLOAT, pix);
      animation = "animate";
     case "animate":
       requestAnimationFrame(anim);
       break;
     case "stop":
       break;
   }
}
function run(v) {
  if( animation == "animate" ){
    animation = "stop";
    document.getElementById('runBtn').value = "Run ";}
  else{
    animation = "animate";
    document.getElementById('runBtn').value = "Stop";
    anim();
  }
}
function reset() {
  if( animation == "stop" ){
    animation = "reset";
    document.getElementById('runBtn').value = "Stop";
    anim();}
  else animation = "reset";
}
function fr(){
  if ( --frames <= 0 ){
    var ti = new Date().getTime();
    var fps = Math.round(200000/(ti - time)) / 10;
    document.getElementById("framerate").value = fps;
    frames = 20;  time = ti;}
}

</script>
</head>

<body onload="webGLStart();" onresize="canvas.resize();">
<table><tr><td>
 <canvas id="canvas" width="500" height="500"></canvas>
</td><td>

<input type="button" onclick="run()" value="Stop" size="1" id="runBtn">
<button onclick="reset()">Reset</button>
<br>a<input size="3" value="3" onchange="a=this.value; setAb=true">
b<input size="3" value="1" onchange="b=this.value; setAb=true">
r<input size="3" value="26.5" onchange="r=this.value; setAb=true">
dt<input size="3" value="0.01" onchange="dt=this.value; setAb=true">
<br>&alpha; <input size="3" value="0.04" onchange="alpha=this.value;setScale=true;drawScene()">

<br>fps <input size="2" id="framerate">

</body></html>
