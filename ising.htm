<html><head>
 <TITLE>2D Ising model</TITLE>

<script id="shader-vs" type="x-shader/x-vertex">#version 300 es
  in vec2 aPos;
  out vec2 vTC;
void main(void) {
   gl_Position = vec4(aPos, 0., 1.);
   vTC = .5*aPos + .5;
}
</script>

<script id="shader-fs" type="x-shader/x-fragment">#version 300 es
precision highp float;
precision highp int;
  uniform highp usampler2D samp;
  in vec2 vTC;
  out uvec2 fragColor;
  uniform float n;
  uniform float h;
  uniform int bw;
  uniform float w[5];
void main(void) {
   uint r = texture(samp, vTC).r;
   uint s = texture(samp, vTC).g;
   if ( ((int(n*vTC.x) + int(n*vTC.y)) & 1) == bw){
     r = 1664525u * r + 1013904223u;
     lowp uint sum = texture(samp, vec2(vTC.x+h, vTC.y)).g;
     sum += texture(samp, vec2(vTC.x-h, vTC.y)).g;
     sum += texture(samp, vec2(vTC.x, vTC.y+h)).g;
     sum += texture(samp, vec2(vTC.x, vTC.y-h)).g;
     s = (float(r) < w[sum]) ? 0u : 1u;
   }
   fragColor = uvec2(r, s);
}
</script>

<script id="shader-fs-show" type="x-shader/x-fragment">#version 300 es
precision highp float;
precision highp int;
  uniform highp usampler2D samp;
  in vec2 vTC;
  out vec4 fragColor;
void main(void) {
   uint u = texture(samp, vTC).g;
   fragColor = vec4(vec3(u), 1.);
}
</script>

<script type="text/javascript">
function getShader ( gl, id ){
   var shaderScript = document.getElementById ( id )
   var str = ""
   var k = shaderScript.firstChild
   while ( k ){
     if ( k.nodeType == 3 ) str += k.textContent
     k = k.nextSibling
   }
   var shader
   if ( shaderScript.type == "x-shader/x-fragment" )
           shader = gl.createShader ( gl.FRAGMENT_SHADER )
   else if ( shaderScript.type == "x-shader/x-vertex" )
           shader = gl.createShader(gl.VERTEX_SHADER)
   else return null
   gl.shaderSource(shader, str)
   gl.compileShader(shader)
   if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) == 0)
      alert(id + "\n" + gl.getShaderInfoLog(shader))
   return shader
}

var gl, prog, prog_show, FBO, FBO1, texture, texture1, ctx,
    cTemp, bHot = true, mouseDown = false,
    timer, delay = 0, frames = 0, time, animation, pix,
    n = 512/1, sampLoc, wLoc, bwLoc, nLoc, hLoc, T = 1
function main() {
   var c = document.getElementById("c")
   var err = "Your browser does not support "
   if (!window.WebGLRenderingContext){
     alert(err+"WebGL. See http://get.webgl.org")
     return}
   try { gl = c.getContext("webgl2")
         if( !gl ) gl = c.getContext("experimental-webgl2")
   } catch(e) {}
   if ( !gl ) {alert("Can't get WebGL 2"); return}

   cTemp = document.getElementById("cnvT")
   cTemp.addEventListener('mousemove', drag, false);
   cTemp.addEventListener('mousedown', function(){mouseDown = true}, false);
   document.addEventListener('mouseup', function(){mouseDown = false}, false);
   cTemp.addEventListener('touchstart', function(){mouseDown = true}, false);
   cTemp.addEventListener('touchmove', continueTouch, false);
   document.addEventListener('touchend', function(){mouseDown = false}, false);
   ctx = cTemp.getContext("2d")
   drawTemp()

   var aPosLoc = 0
   prog_show  = gl.createProgram()
   gl.attachShader(prog_show, getShader( gl, "shader-vs" ))
   gl.attachShader(prog_show, getShader( gl, "shader-fs-show" ))
   gl.bindAttribLocation(prog_show, aPosLoc, "aPos")
   gl.linkProgram(prog_show)

   prog  = gl.createProgram()
   gl.attachShader(prog, getShader( gl, "shader-vs" ))
   gl.attachShader(prog, getShader( gl, "shader-fs" ))
   gl.bindAttribLocation(prog, aPosLoc, "aPos")
   gl.linkProgram(prog)
   gl.useProgram(prog)
   sampLoc  = gl.getUniformLocation(prog, "samp")
   bwLoc  = gl.getUniformLocation(prog, "bw")
   wLoc  = gl.getUniformLocation(prog, "w")
   nLoc  = gl.getUniformLocation(prog, "n")
   hLoc  = gl.getUniformLocation(prog, "h")
   gl.enableVertexAttribArray( aPosLoc )
   var data = new Float32Array([-1,-1,  1,-1,  -1,1,  1,1])
   gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer())
   gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW)
   gl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, gl.FALSE, 0, 0)

   var w = new Uint32Array(5), m = 0xFFFFFFFF
w=[]
   for(var i = 0; i < 5; i++)
      w[i] = Math.floor(m/(1 + Math.exp(2*(2*i - 4)/T)))
   gl.uniform1fv(wLoc, w)
   gl.uniform1f(nLoc, n)
   gl.uniform1f(hLoc, 1/n)
   var t = 0
   pix = new Uint32Array(2*n*n)
   for(var i = 0; i<n; i++)
     for(var j = 0; j<n; j++){
       pix[t++] = m*Math.random()
       pix[t++] = (bHot) ? Math.round(Math.random()) : 0
     }
   texture1 = gl.createTexture()
   gl.activeTexture(gl.TEXTURE1)
   gl.bindTexture(gl.TEXTURE_2D, texture1)
   gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1)
   gl.texImage2D(gl.TEXTURE_2D, 0, gl.RG32UI, n, n, 0,
     gl.RG_INTEGER, gl.UNSIGNED_INT, pix)
   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)
   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)

   texture = gl.createTexture()
   gl.activeTexture(gl.TEXTURE0)
   gl.bindTexture(gl.TEXTURE_2D, texture)
   gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1)
   gl.texImage2D(gl.TEXTURE_2D, 0, gl.RG32UI, n, n, 0,
     gl.RG_INTEGER, gl.UNSIGNED_INT, pix)
   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)
   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)

   FBO = gl.createFramebuffer()
   gl.bindFramebuffer(gl.FRAMEBUFFER, FBO)
   gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
       gl.TEXTURE_2D, texture, 0)
   FBO1 = gl.createFramebuffer()
   gl.bindFramebuffer(gl.FRAMEBUFFER, FBO1)
   gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
       gl.TEXTURE_2D, texture1, 0)
   if( gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE)
     alert("FBOs are not complete")


   animation = "animate"
   anim()
}
function draw(){
  gl.viewport(0,0, n,n);
  gl.useProgram(prog)
  for ( var i = 0; i < 1;  i++ ){
    gl.uniform1i(sampLoc, 0)
    gl.uniform1i(bwLoc, 0)
    gl.bindFramebuffer(gl.FRAMEBUFFER, FBO1)
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)
    gl.uniform1i(sampLoc, 1)
    gl.uniform1i(bwLoc, 1)
    gl.bindFramebuffer(gl.FRAMEBUFFER, FBO)
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)
  }
  gl.viewport(0,0, 512,512);
  gl.useProgram(prog_show)
  gl.bindFramebuffer(gl.FRAMEBUFFER, null)
  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)
  frames++
}
function drawTemp(){
   ctx.clearRect(0,0, 32, 512)
   if(T > 0) ctx.fillStyle = "#FF0000"
   else ctx.fillStyle = "#0000FF"
   var y = Math.abs(T)*512/4
   ctx.fillRect(0,512-y, 32, y)
   ctx.fillStyle = "#000000"
   ctx.fillRect(0,512 - 2.269*512/4 - 3, 32,6)
}
function anim(){
   draw()
   switch ( animation ){
     case "reset":
      var t = 0, m = 0xFFFFFFFF
      for(var i = 0; i<n; i++)
        for(var j = 0; j<n; j++){
          pix[t++] = m*Math.random()
          pix[t++] = (bHot) ? Math.round(Math.random()) : 0
        }
      gl.activeTexture(gl.TEXTURE1)
      gl.bindTexture(gl.TEXTURE_2D, texture1)
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RG32UI, n, n, 0,
        gl.RG_INTEGER, gl.UNSIGNED_INT, pix)
      gl.activeTexture(gl.TEXTURE0)
      gl.bindTexture(gl.TEXTURE_2D, texture)
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RG32UI, n, n, 0,
        gl.RG_INTEGER, gl.UNSIGNED_INT, pix)
      animation = "animate"
     case "animate":
       if (delay == 0) requestAnimationFrame(anim)
       else setTimeout("requestAnimationFrame(anim)", delay)
       break
     case "stop":
       break
   }
}
function run(v) {
  if( animation == "animate" ){
    animation = "stop"
    document.getElementById('runBtn').value = "Run "}
  else{
    animation = "animate"
    document.getElementById('runBtn').value = "Stop"
    anim()
  }
}
function reset() {
  if( animation == "stop" ){
    animation = "reset"
    document.getElementById('runBtn').value = "Stop"
    anim()}
  else animation = "reset"
}

function setT(val) {
  var w = new Uint32Array(5), m = 0xFFFFFFFF
w=[]
  for(var i = 0; i < 5; i++)
    w[i] = Math.floor(m/(1 + Math.exp(2*(2*i - 4)/T)))
  gl.useProgram(prog)
  gl.uniform1fv(wLoc, w)
  drawTemp()
}
function setMag(s) {
   n = 512/s.valueOf();
   gl.useProgram(prog)
   gl.uniform1f(nLoc, n)
   gl.uniform1f(hLoc, 1/n)
   var animation0 = animation
   animation = "reset"
   if(animation0 == "stop"){
    document.getElementById('runBtn').value = "Stop"
    anim()
   }
}
function drag(ev){
  ev.preventDefault()
  if( !mouseDown ) return
  if (!ev.clientX) ev = ev.touches[0]
  var rect = cTemp.getBoundingClientRect()
  T = 4*(1 - (ev.clientY - rect.top) / 512)
  document.getElementById('T').value = Math.round(100*T)/100
  setT()
  drawTemp()
}
function continueTouch(evt) {
  evt.preventDefault()
  if( !mouseDown ) return
  var y = evt.touches[0].pageY;

  var rect = cTemp.getBoundingClientRect()
  T = 4*(1 - (y - rect.top) / 512)
  document.getElementById('T').value = Math.round(100*T)/100
  setT()
  drawTemp()
}
</script>

</HEAD>
<body onload="main()">

<canvas id="c" width="512" height="512"></canvas>
<canvas id="cnvT" width="32" height="512"></canvas>
<br><button onclick="bHot=true; reset()">Hot</button>
<button onclick="bHot=false; reset()">Could</button>
<input type="button" onclick="run()" value="Stop" size="1" id="runBtn">
it<input size="1" value="1" onchange="it=parseInt( this.value )">
T<input id="T" size="2" value="1" onchange="T=parseFloat(this.value);setT()">
mag<select onchange="setMag(this.options[this.selectedIndex].value)">
   <option selected="1">1
   <option value="2">2
   <option value="4">4
   <option value="8">8
   <option value="16">16
   </select>

</body>
</html>
